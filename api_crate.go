/*
notifier

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.1
Contact: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// CrateApiService CrateApi service
type CrateApiService service

type ApiHandleAddEmailChannelRequest struct {
	ctx context.Context
	ApiService *CrateApiService
	addEmailChannelBody *AddEmailChannelBody
}

func (r ApiHandleAddEmailChannelRequest) AddEmailChannelBody(addEmailChannelBody AddEmailChannelBody) ApiHandleAddEmailChannelRequest {
	r.addEmailChannelBody = &addEmailChannelBody
	return r
}

func (r ApiHandleAddEmailChannelRequest) Execute() (*http.Response, error) {
	return r.ApiService.HandleAddEmailChannelExecute(r)
}

/*
HandleAddEmailChannel Add email channel

Add email channel

Add email notification channel for user


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiHandleAddEmailChannelRequest
*/
func (a *CrateApiService) HandleAddEmailChannel(ctx context.Context) ApiHandleAddEmailChannelRequest {
	return ApiHandleAddEmailChannelRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CrateApiService) HandleAddEmailChannelExecute(r ApiHandleAddEmailChannelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrateApiService.HandleAddEmailChannel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/add_channel/email"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addEmailChannelBody == nil {
		return nil, reportError("addEmailChannelBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addEmailChannelBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHandleAddTelegramChannelRequest struct {
	ctx context.Context
	ApiService *CrateApiService
	addTelegramChannelBody *AddTelegramChannelBody
}

func (r ApiHandleAddTelegramChannelRequest) AddTelegramChannelBody(addTelegramChannelBody AddTelegramChannelBody) ApiHandleAddTelegramChannelRequest {
	r.addTelegramChannelBody = &addTelegramChannelBody
	return r
}

func (r ApiHandleAddTelegramChannelRequest) Execute() (*http.Response, error) {
	return r.ApiService.HandleAddTelegramChannelExecute(r)
}

/*
HandleAddTelegramChannel Add telegram channel

Add telegram channel

Add telegram notification channel for user


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiHandleAddTelegramChannelRequest
*/
func (a *CrateApiService) HandleAddTelegramChannel(ctx context.Context) ApiHandleAddTelegramChannelRequest {
	return ApiHandleAddTelegramChannelRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CrateApiService) HandleAddTelegramChannelExecute(r ApiHandleAddTelegramChannelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrateApiService.HandleAddTelegramChannel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/add_channel/telegram"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addTelegramChannelBody == nil {
		return nil, reportError("addTelegramChannelBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addTelegramChannelBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHandleSendNotificationRequest struct {
	ctx context.Context
	ApiService *CrateApiService
	sendNotificationBody *SendNotificationBody
}

func (r ApiHandleSendNotificationRequest) SendNotificationBody(sendNotificationBody SendNotificationBody) ApiHandleSendNotificationRequest {
	r.sendNotificationBody = &sendNotificationBody
	return r
}

func (r ApiHandleSendNotificationRequest) Execute() (*http.Response, error) {
	return r.ApiService.HandleSendNotificationExecute(r)
}

/*
HandleSendNotification Send notification

Send notification

send notification to user with given id on all channels registered for that user


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiHandleSendNotificationRequest
*/
func (a *CrateApiService) HandleSendNotification(ctx context.Context) ApiHandleSendNotificationRequest {
	return ApiHandleSendNotificationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CrateApiService) HandleSendNotificationExecute(r ApiHandleSendNotificationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrateApiService.HandleSendNotification")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sendNotificationBody == nil {
		return nil, reportError("sendNotificationBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sendNotificationBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
